/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - Java Arrays Ballerina Generator'

def packageName = "jballerina.java.arrays"
def packageOrg = "ballerina"
def platform = "java11"
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def tomlVersion = stripBallerinaExtensionVersion("${project.version}")
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def distributionBinPath =  project.projectDir.absolutePath + "/build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bin"
def originalConfig = ballerinaConfigFile.text

def stripBallerinaExtensionVersion(String extVersion) {
    if (extVersion.matches(project.ext.timestampedVersionRegex)) {
        def splitVersion = extVersion.split('-');
        if (splitVersion.length > 3) {
            def strippedValues = splitVersion[0..-4]
            return strippedValues.join('-')
        } else {
            return extVersion
        }
    } else {
        return extVersion.replace("${project.ext.snapshotVersion}", "")
    }
}

configurations {
    jbalTools
}

dependencies {
    jbalTools("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }

    compile group: 'org.ballerinalang', name: 'ballerina-lang', version: "${ballerinaLangVersion}"
    compile group: 'org.ballerinalang', name: 'ballerina-runtime', version: "${ballerinaLangVersion}"

}

clean {
    delete "$project.projectDir/target"
    delete "$project.projectDir/Ballerina.lock"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
    }
}

task updateTomlFile {
    doLast {
        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)

        ballerinaConfigFile.text = newConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
    }
}

def groupParams = ""
def disableGroups = ""
def debugParams = ""
def balJavaDebugParam = ""
def testParams = ""
def needSeparateTest = false
def needBuildWithTest = false
def needPublishToCentral = false
def needPublishToLocalCentral = false

task initializeVariables {
    if (project.hasProperty("groups")) {
        groupParams = "--groups ${project.findProperty("groups")}"
    }
    if (project.hasProperty("disable")) {
        disableGroups = "--disable-groups ${project.findProperty("disable")}"
    }
    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }
    if (project.hasProperty("balJavaDebug")) {
        balJavaDebugParam = "BAL_JAVA_DEBUG=${project.findProperty("balJavaDebug")}"
    }
    if (project.hasProperty("publishToLocalCentral") && (project.findProperty("publishToLocalCentral") == "true")) {
        needPublishToLocalCentral = true
    }
    if (project.hasProperty("publishToCentral") && (project.findProperty("publishToCentral") == "true")) {
        needPublishToCentral = true
    }

    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(":${packageName}-ballerina:build") || graph.hasTask(":${packageName}-ballerina:publish") ||
                graph.hasTask(":${packageName}-ballerina:publishToMavenLocal")) {

            needSeparateTest = false
            needBuildWithTest = true
            if (graph.hasTask(":${packageName}-ballerina:publish")) {
                needPublishToCentral = true
            }
        } else {
            needSeparateTest = true
        }

        if (graph.hasTask(":${packageName}-ballerina:test")) {
            testParams = "--code-coverage --jacoco-xml --includes=org.ballerinalang.stdlib.*:ballerina.*"
        } else {
            testParams = "--skip-tests"
        }
    }
}

task ballerinaBuild {
    inputs.dir file(project.projectDir)

    doLast {
        if (needSeparateTest) {
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/bal.bat test ${testParams} ${groupParams} ${disableGroups} ${debugParams} && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/bal test ${testParams} ${groupParams} ${disableGroups} ${debugParams}"
                }
            }
        } else if (needBuildWithTest) {
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/bal.bat build -c ${testParams} ${debugParams} && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/bal build -c ${testParams} ${debugParams}"
                }
            }
            // extract bala file to artifact cache directory
            file("$project.projectDir/target/bala").eachFileMatch(~/.*.bala/) { balaFile ->
                copy {
                    from zipTree(balaFile)
                    into file("$artifactCacheParent/bala/${packageOrg}/${packageName}/${tomlVersion}/${platform}")
                }
            }
            copy {
                from file("$project.projectDir/target/cache")
                exclude '**/*-testable.jar'
                exclude '**/tests_cache/'
                into file("$artifactCacheParent/cache/")
            }

            // Doc creation and packing
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/bal.bat doc && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/bal doc"
                }
            }
            copy {
                from file("$project.projectDir/target/apidocs/${packageName}")
                into file("$project.projectDir/build/docs_parent/docs/${packageName}")
            }
        }

        if (needPublishToCentral) {
            if (project.version.endsWith('-SNAPSHOT') ||
                    project.version.matches(project.ext.timestampedVersionRegex)) {
                return
            }
            if (ballerinaCentralAccessToken != null) {
                println("Publishing to the ballerina central..")
                exec {
                    workingDir project.projectDir
                    environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                        commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%%"
                    } else {
                        commandLine 'sh', '-c', "$distributionBinPath/bal push"
                    }
                }
            } else {
                throw new InvalidUserDataException("Central Access Token is not present")
            }
        } else if (needPublishToLocalCentral) {
            println("Publishing to the ballerina local central repository..")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%% --repository=local"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/bal push --repository=local"
                }
            }
        }
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactBallerinaDocs
    outputs.dir artifactLibParent
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-ballerina-jballerina.java.arrays")
            credentials {
                username = System.getenv("publishUser")
                password = System.getenv("publishPAT")
            }
        }
    }
}

updateTomlFile.dependsOn unpackJballerinaTools
ballerinaBuild.dependsOn updateTomlFile
ballerinaBuild.dependsOn initializeVariables
ballerinaBuild.dependsOn ":${packageName}-test-utils:build"
ballerinaBuild.finalizedBy revertTomlFile
test.dependsOn ballerinaBuild
build.dependsOn ballerinaBuild
publishToMavenLocal.dependsOn build
publish.dependsOn build
